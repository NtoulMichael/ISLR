# -*- coding: utf-8 -*-
"""Exe9.Chapter2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14eIgBgMmKHuQpKyAbZaEghcJB9mPeb1e
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
from pandas.plotting import scatter_matrix
# Importing Libaries

from google.colab import files
uploaded = files.upload()
# Upload the csv, a promt will appear and you will need to upload the Auto.csv file from your local drive.

dfo =pd.read_csv('Auto.csv')
print(df)
# Load the csv and assign in to df.

df = pd.read_csv("Auto.csv", na_values = ["?"])
# Drop the rows which contain missing values (safe to do since we've worked with this data in a previous lab)
df.dropna(inplace = True)
# Check the dimensions of the dataframe
df.shape

df.head()
# A previewe of the data set

# We compute the range of each quantitive predictor, while changing some that seem numeric to categorical
df['cylinders'] = df['cylinders'].astype('category')
df['year'] = df['year'].astype('category')
df['origin'] = df['origin'].astype('category')
auto_max = df.loc[:, ["mpg", "displacement", "horsepower", "weight", "acceleration"]].max(axis = 0)
auto_min = df.loc[:, ["mpg", "displacement", "horsepower", "weight", "acceleration"]].min(axis = 0)
auto_range = auto_max - auto_min
# Generate a dataframe with the max, min, and range of each quantitative variable for better undersrtanding
pd.DataFrame({"max":auto_max, "min":auto_min, "range":auto_range})

df.describe()
# Among other information we can see the mean and the sd of each numeric variable

# Reset the index of the df data frame
df.reset_index(drop = True, inplace = True)
# We create dataframe in which the 10th through 85th observations are dropped
df_dropped = df.drop(index = list(range(9, 85)))
# Compute max, min, range, mean, and standard deviation for each quantitative variable
dropped_max = df_dropped.loc[:, "mpg":"year"].max(axis = 0)
dropped_min = df_dropped.loc[:, "mpg":"year"].min(axis = 0)
dropped_range = dropped_max - dropped_min
dropped_mean = df_dropped.loc[:, "mpg":"year"].mean(axis = 0)
dropped_sd = df_dropped.loc[:, "mpg":"year"].std(axis = 0)
# Generate a dataframe with the max, min, range, mean, and standard deviation for each quantitative variable
# Again note that the describe() function would provide all of these values except for the range
pd.DataFrame({"max":dropped_max, "min":dropped_min, "range":dropped_range, "mean":dropped_mean, "std dev":dropped_sd})
# In our calculation we included the categorical variables, as python seems exclude them

# Create scatter plot for the relationship between horsepower and mpg
g = sns.relplot(x = "horsepower", y = "mpg", data = df)
plt.show()

# Create scatter plot for the relationship between car weight and mpg
g = sns.relplot(x = "weight", y = "mpg",data = df)
g.set(xlabel = "Car weight (pounds)")
plt.show()

dfc = pd.DataFrame(df, columns=["mpg", "displacement", "horsepower", "weight", "acceleration"])
corrMatrix = dfc.corr()
print (corrMatrix)
# #As we can see in the corr output, mpg has a great correlation with displacement horsepower and weight but not so much with acceleration.
# In conclusion the above variables can be used as predictors. With further investigation some of the factor variables can be included.

"""END"""